// Generated by CoffeeScript 1.6.3
(function() {
  var israelCenter, israelExtent, root, scoreClassScale, scoreColorScale,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.guide = [
    {
      "category": "דרכי התקשרות עם הרשות המקומית וראש הרשות",
      "fields": ["הכתובת הפיזית של משרדי הרשות", "מספרי טלפון (מרכזיית הרשות/ שלוחות)", "אימייל כללי לרשות/ טופס פניה מקוון/ מייל  לפניות הציבור", "שם ראש הרשות", "מספר הטלפון של ראש הרשות", "אימייל/ טופס מקוון ליצירת קשר עם ראש הרשות"]
    }, {
      "category": "דרכי התקשרות עם האגף והמחלקה",
      "fields": ["פנייה מקוונת למוקד העירוני באתר הרשות", "שם מנהל/ת האגף", "רמת האגף: טלפון", "רמת האגף: אימייל/ טופס מקוון/ צור קשר", "כתובת פיזית של האגף", "פרסום שעות קבלת קהל של האגף", "שם מנהל/ת המחלקה", "רמת המחלקה: טלפון כללי"]
    }, {
      "category": "דרכי התקשרות עם חברי מועצה",
      "fields": ["רשימה של חברי מועצה", "לכל חבר/ת מועצה מצוין אימייל/טופס מקוון", "מצוין מספר טלפון", "כן/לא נוכחות בפייסבוק / טוויטר/ פורומים באתר"]
    }, {
      "category": "מבקר העירייה",
      "fields": ["פרסום הדו\"ח השנתי האחרון (2011) של מבקר הרשות", "פרסום דו\"חות השנתיים הקודמות (2009-2010) של מבקר הרשות", "פרסום פרטי קשר של מבקר הרשות, ודרכי הפנייה אליו"]
    }, {
      "category": "שקיפות: לפי חוק חופש המידע",
      "fields": ["פרסום הדו\"ח השנתי האחרון  של הממונה על חופש המידע (2011)", "פרסום הדו\"חות השנתיים הקודמות (2010-2009)", "המבנה הארגוני מוצג באתר (תרשים זרימה- עץ)", "פרסום חוק חופש המידע", "פרסום שם הממונה על חופש המידע", "אימייל אישי/טופס פנייה מקוון לממונה", "מספר הטלפון במשרד הממונה"]
    }, {
      "category": "פניות הציבור",
      "fields": ["פרסום שם הממונה על פניות/תלונות הציבור", "אימייל אישי/טופס פנייה מקוון לממונה", "מספר הטלפון במשרד הממונה"]
    }, {
      "category": "שקיפות: נדרש ע\"פ חוק חופש המידע",
      "fields": ["רשימת מאגרי מידע", "סקירת עיקרי פעולות הרשות המתוכננות לשנה הנוכחית (2013)", "פרסום חוקי עזר עירוניים"]
    }, {
      "category": "מענקים ותמיכות",
      "fields": ["רשימת קרנות ומלגות שבמימון הרשות הציבורית (ע\"פ חוק חופש המידע)", "רשימת תמיכות וחסויות שנתנה הרשות הציבורית בשנה החולפת", "קריטריונים למתן תמיכות וחסויות", "הקצאת מבני ציבור", "פרסום מידע בנוגע להקצאת קרקע כתמיכה למטרות ציבוריות", "פרסום של הפרוטוקולים של דיוני ועדת מענקים ותמיכות"]
    }, {
      "category": "שקיפות: כללי",
      "fields": ["פרסום קוד אתי", "פרסום טפסים לגבי ניגודי עניינים של נבחרי ציבור ובכירים (לדוגמה, ראש הרשות וסגניו, חברי מועצה, מנכ\"ל והנהלה בכירה)", "פרסום הסכמים קואליציוניים", "מידע סטטיסטי: פרסום המידע הסטטיסטי המופק ברשות המקומית (דמוגרפיה/חינוך; ללא קשר למאגרי המידע)", "מידע סטטיסטי: פרסום המידע הנ\"ל תוך התייחסות בעיבוד הנתונים להשלכות מגדריות; בעקבות תיקון חקיקה"]
    }, {
      "category": "ישיבות מועצה",
      "fields": ["פרסום מועדי הישיבות ומיקומן", "פרסום מסמכים וטיוטות הקשורים לישיבות", "פרוטוקולים: גם בווידיאו ואודיו (לציין אם נמצאו פרוטוקולים באודיו בלבד)"]
    }, {
      "category": "כספים: תקציב – לפי חוק חופש המידע",
      "fields": ["פרסום התקציב לשנה הנוכחית (2012)", "פרסום תקציר המספק את עיקרי המידע, כולל סכומים", "פרסום תקציב השנתיים הקודמות (לפי החוק: רק לשנה החולפת) (2010-2011)", "פירוט הוצאות הרשות הציבורית בשנה החולפת, לפי סעיפי התקציב (2011)"]
    }, {
      "category": "כספים: תקציב – המידע אינו נדרש לפי חוק חופש המידע",
      "fields": ["פרסום תכנון לעומת ביצוע (מקורות כספיים ושימושים לכל מחלקה) 2011", "ריכוז מידע על סעיפי ההכנסות הגבוהים ביותר (תקבולים, זיכיונות) 2011", "ריכוז מידע על סעיפי ההוצאות הגבוהים ביותר (ספקים, דלק לסוגיו, השימוש בכלי רכב של הרשות) 2011", "פרסום חמשת מקבלי השכר הגבוה ברשות לפי תפקידים בלבד (ללא שמות)", "פרסום הדו\"חות הכספיים של הרשות לשנת 2011 ( מאזן + דו\"ח רווח והפסד)", "פרסום הדו\"ח הכספי לשנת 2010", "פרסום הפרוטוקולים של דיוני התקציב בוועדת הכספים של תקציב 2012"]
    }, {
      "category": "כספים: ארנונה",
      "fields": ["תעריפי ארנונה (פרטית, עסקית, ציבורית)", "קריטריונים להנחות ופטורים בארנונה"]
    }, {
      "category": "חוזים ומכרזים: תשתית ורכש",
      "fields": ["פרסום מכרזי תשתית ורכש באתר", "פרסום קריטריונים במכרז", "פרסום תכנון שנתי של תכניות הרכש", "פרסום פרוטוקולים של  ועדת מכרזים", "פרסום תוצאות המכרזים באתר העירייה (בנפרד מפרוטוקול הוועדה)", "יש RSS (הודעות ע\"י אמייל/לנייד על עדכון באתר)"]
    }, {
      "category": "חוזים ומכרזים: כוח אדם",
      "fields": ["פרסום המכרזים באתר", "פרסום תנאי סף במכרז"]
    }, {
      "category": "רישוי עסקים",
      "fields": ["פרסום מידע על התנאים למתן רישיון עסק ותהליך הרישוי למבקשי הרישיון"]
    }, {
      "category": "תכנון ובנייה",
      "fields": ["פרסום תכניות הבנייה לאנשי מקצוע (ארכיטקטים, עורכי דין)", "פרסום תכניות הבנייה בשפה ברורה ובאופן המאפשר התמצאות קלה (לדוגמה, אפשרות חיפוש/סינון ע\"פ מיקום, ע\"פ ועדות, ע\"פ לו\"ז וכד'. אפשר לתאר את המידע הקיים)", "מידע קונקרטי לתושב בנושאי רישוי ופיקוח והיתרי בנייה (התהליך לאישור סגירת מרפסת)", "העלאת טיוטות של תוכניות תכנון ובנייה לדיון ציבורי", "מערכת GIS (הצגת נתונים על גבי מפה) כוללת מידע על ייעודי קרקע.", "פרסום פרוטוקולים של ועדת תכנון ובניה"]
    }, {
      "category": "תכנון וסביבה: זיהום אויר",
      "fields": ["תוצאות מדידות איכות האוויר (עדכון און-ליין מתחנות ניטור אוויר)", "דו\"חות מסכמים: איכות האוויר", "תוצאות מדידות של פליטת מזהמים ספיציפיים לאוויר (כלי רכב, מפעלים, ארובות)", "מיקום, שיטת איסוף המידע והגורם שאסף את המידע עבור הרשות"]
    }, {
      "category": "זיהום מים",
      "fields": ["דו\"חות איכות מי שתיה"]
    }, {
      "category": "תכנון וסביבה: זיהום קרקע",
      "fields": ["תוצאות בדיקות המבוצעות בקרקע ופרסום סקרי קרקע", "מיקום, שיטת איסוף המידע והגורם שאסף את המידע עבור הרשות", "פרסום שמות החומרים שמזהמים את הקרקע"]
    }, {
      "category": "תכנון וסביבה: רעש וריח",
      "fields": ["תוצאות מדידות רעש", "תוצאות מדידות ריח", "מיקום, שיטת איסוף המידע והגורם שאסף את המידע עבור הרשות במדידות רעש וריח"]
    }, {
      "category": "תכנון וסביבה: קרינה",
      "fields": ["רשימת אנטנות סלולריות (מיקום, סוג מתקן, מספר, מפעיל)", "תוצאות מדידות קרינה מייננת ובלתי מייננת", "מיקום, שיטת איסוף המידע והגורם שאסף את המידע עבור הרשות במדידות"]
    }, {
      "category": "חופים",
      "fields": ["בדיקת איכות מי הרחצה בחופים"]
    }, {
      "category": "תכנון וסביבה: המידע אינו נדרש לפי חוק חופש המידע",
      "fields": ["פרסום פרוטוקולים של ועדת איכות הסביבה", "האם יש פרסום קריטריונים לזיהום סביבתי, או קישור לחקיקה בנושא", "האם יש פרסום של מידע או מיקום פחי מיחזור, מכל הסוגים: נייר, רטוב/ קומפוסטרים, פלסטיק/ בקבוקים, זכוכית, סוללות, מצברים, שמנים.", "האם יש מידע על נוהל פינוי במקרה שלתושב אין יכולת לפנות בעצמו", "האם יש פרסום של מספר גנים ציבוריים ביחס לשטח העיר", "האם יש פרסום לגבי מיקום למסירת בגדי יד שנייה"]
    }, {
      "category": "חברות עירוניות",
      "fields": ["פרסום רשימת החברות העירוניות", "פרסום רשימת חברי הדירקטוריון של כל החברות העירוניות (כולל חברי מועצה ונציגי ציבור)", "קישור לאתר החברות שבבעלות העירייה, כולל בעלות חלקית, או תת-אתר באתר העירוני עבורן", "דו\"חות שנתיים של החברות העירוניות"]
    }
  ];

  root.data = [
    {
      "data": [[1.0, 1.0, 0.0, 1.0, 1.0, 0.0], [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.5, 0.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0], ["-", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.0, 0.0, 0.5, 0.0], [0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [0.0, "-", 0.0, 0.0, 1.0, 0.0], [1.0, "+"], [0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "אופקים",
      "coordinates": [34.622825, 31.311336],
      "id": 45
    }, {
      "data": [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.5, 1.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "אור יהודה",
      "coordinates": [34.856174, 32.029747],
      "id": 44
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0], [1.0, 1.0, 1.0], [0.5, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.5], [1.0, "+"], [1.0], [0.0, 0.5, 1.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, "+"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["-"], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.5, 1.0, 0.0]],
      "name": "אילת",
      "coordinates": [34.951926, 29.557668],
      "id": 23
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 1.0, 0.0, 0.0, 1.0], [1.0, "+"], [0.0], [0.0, 0.0, 1.0, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 0.5, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0]],
      "name": "אריאל",
      "coordinates": [35.174515, 32.104636],
      "id": 25
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.5, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 0.5, 0.0, 1.0, 0.5], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["-"], [1.0, 0.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "אשקלון",
      "coordinates": [34.559466, 31.665944],
      "id": 21
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["-", 1.0, 1.0, 0.5, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [1.0, 0.0, 0.5, 1.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 1.0, 0.5], [1.0, "+"], [1.0], [0.0, 0.0, 0.5, 0.0, 0.0, 1.0], [1.0, 1.0, 0.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [1.0, 0.5, 1.0, 0.0]],
      "name": "באר שבע",
      "coordinates": [34.791464, 31.252972],
      "id": 16
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.5, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.5, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 1.0, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0]],
      "name": "בית שמש",
      "coordinates": [34.9881, 31.74704],
      "id": 29
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 1.0], ["+", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [0.0, "-", 0.0, 0.0, 0.0, 0.0], [0.0, "-"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "ביתר עילית",
      "coordinates": [35.118037, 31.693492],
      "id": 47
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 0.0, 0.5, 0.0, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 1.0, 0.0, 0.0], [1.0, "+"], [1.0], [0.0, 0.0, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 0.0, 1.0], [0.0, 0.5, 1.0, 0.0]],
      "name": "בני ברק",
      "coordinates": [34.835228, 32.084931],
      "id": 30
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5], [1.0, 0.5, 0.5, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0], [0.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.5, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.5], [0.5, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 1.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [1.0, 0.0, "-"], ["-"], [1.0, 0.0, 1.0, 1.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "בת ים",
      "coordinates": [34.748021, 32.013185],
      "id": 15
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.5, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "-"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["X"], [1.0, 0.0, 1.0, 1.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "גבעת שמואל",
      "coordinates": [34.849208, 32.077298],
      "id": 19
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 0.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.5], [0.5, 0.0, 0.5, 1.0], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [0.0, "-"], [1.0], [0.5, 0.5, 1.0, 0.0, 1.0, 1.0], [1.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [1.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0], [1.0, 0.5, 0.5, 0.0]],
      "name": "גבעתיים",
      "coordinates": [34.808873, 32.072175],
      "id": 18
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0], [0.0, 1.0, 1.0], [0.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 1.0, 1.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 0.5, 1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0], [0.0, 1.0, 1.0, 0.0]],
      "name": "הוד השרון",
      "coordinates": [34.893597, 32.155693],
      "id": 27
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.5, 1.0, 0.5, 0.0], [1.0, 1.0, 1.0, 0.0, 0.0, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 0.5, 1.0, 1.0, 1.0, 0.0], [0.0, 1.0, 1.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["+"], [0.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.5, 1.0, 0.0]],
      "name": "הרצליה",
      "coordinates": [34.844677, 32.162412],
      "id": 13
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.0, 1.0, 0.5], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.5], [0.0, 0.0, 0.5, 0.0], [1.0, 1.0, 1.0, 0.0, 0.5, 0.5, 0.5], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [1.0, 0.5, 1.0, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, "+"], [1.0], [1.0, "+", "+"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["-"], [0.5, 1.0, 1.0, 1.0, 0.0, 0.0], [1.0, 0.5, 1.0, 0.0]],
      "name": "חדרה",
      "coordinates": [34.92088, 32.442784],
      "id": 14
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.5, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0], [1.0, 0.0, 0.5], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 1.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [1.0, 1.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5]],
      "name": "חולון",
      "coordinates": [34.787386, 32.015832],
      "id": 4
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 1.0], [1.0, 1.0, 0.5], [1.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 0.5, 1.0, 0.0], [1.0, 1.0], [1.0, "+", 0.5, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 0.0, "+"], [0.0], [0.0, "-", "-"], [1.0, 0.0, "-"], [1.0, 1.0, "+"], ["+"], [0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]],
      "name": "חיפה",
      "coordinates": [34.974339, 32.83036],
      "id": 5
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0], [1.0, 1.0, 0.5, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 0.5, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["-"], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]],
      "name": "טבריה",
      "coordinates": [35.530975, 32.795858],
      "id": 33
    }, {
      "data": [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 1.0], [0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["-", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [0.0, "-"], [1.0], [1.0, 1.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "טירת כרמל",
      "coordinates": [34.972982, 32.762126],
      "id": 38
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0], [1.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 1.0], [0.5, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.5, 0.0], [1.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [0.0], [1.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 1.0, 1.0, 0.0]],
      "name": "יבנה",
      "coordinates": [34.73945, 31.877957],
      "id": 26
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0], [1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["-", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.5, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [0.0, 1.0, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.5, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]],
      "name": "יהוד",
      "coordinates": [34.879581, 32.029337],
      "id": 35
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0], [1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["-", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0], [1.0, 1.0], [0.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.5, 0.0]],
      "name": "יקנעם",
      "coordinates": [35.104608, 32.660224],
      "id": 39
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 1.0, 1.0], ["+", 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.5, 1.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, "+", 0.0, 1.0, 1.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["X"], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]],
      "name": "ירושלים",
      "coordinates": [35.213711, 31.768318],
      "id": 2
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["-", 0.5, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.5, 0.0], [0.0, 1.0, 1.0], [0.5, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0], [0.0, 0.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [1.0, 0.0, "-"], [1.0, 1.0, "+"], ["X"], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0]],
      "name": "כפר סבא",
      "coordinates": [34.907612, 32.178194],
      "id": 7
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0], [1.0, 0.5, 1.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.0, 0.0, 0.5, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [0.0, "-", 0.0, 0.0, 0.0, 1.0], [0.0, "-"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "+"], ["X"], [0.0, 0.0, 0.0, 1.0, 0.5, 0.0], [0.0, 1.0, 1.0, 0.5]],
      "name": "כרמיאל",
      "coordinates": [35.292418, 32.91467],
      "id": 34
    }, {
      "data": [[1.0, 0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0], [1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 0.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "-"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, "+"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.5, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "מגדל העמק",
      "coordinates": [35.243446, 32.6735],
      "id": 43
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.5, 1.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["X"], [1.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 1.0, 1.0, 0.5]],
      "name": "מודיעין",
      "coordinates": [35.14246, 31.661039],
      "id": 8
    }, {
      "data": [[0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 1.0], [1.0, 0.5, 1.0, 0.0], [0.0, 0.5, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["-", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0]],
      "name": "מעלה אדומים",
      "coordinates": [35.297957, 31.777368],
      "id": 37
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["-"], [0.0, 0.0, 0.5, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "נהריה",
      "coordinates": [35.094671, 33.011351],
      "id": 40
    }, {
      "data": [[0.5, 0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 0.5, 0.5, 0.5, 0.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.5], [0.0, 1.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [0.0, "-"], [0.0], [0.0, 0.5, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "+"], ["X"], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.5, 0.0, 0.0]],
      "name": "נצרת עלית",
      "coordinates": [35.303548, 32.699634],
      "id": 46
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0], [0.0, 0.5, 1.0], [0.0, 0.0, 0.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [1.0, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "-"], [1.0], [0.0, 0.0, 0.5, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "נתיבות",
      "coordinates": [34.595255, 31.423195],
      "id": 28
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.0, 1.0, 0.0], [0.5, 0.0, 0.0, 1.0, 1.0], [0.0, 1.0, 0.5], [0.5, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, "+"], [1.0], [1.0, "+", "-"], [1.0, 0.0, "+"], [0.0, 1.0, "+"], ["+"], [0.0, 1.0, 0.5, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 0.5]],
      "name": "נתניה",
      "coordinates": [34.853197, 32.321457],
      "id": 6
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.5, 1.0, 0.5], [0.0, 0.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [0.5, 1.0, 1.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.5, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 0.5, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["+"], [0.5, 1.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "עכו",
      "coordinates": [35.08268, 32.933051],
      "id": 11
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0], [1.0, 0.5, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [0.0], [1.0, 0.0, 1.0, 0.0, 1.0, 1.0], [0.0, 1.0, 0.0, "+"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 0.0, 0.0], [1.0, 1.0, 1.0, 0.0]],
      "name": "פתח תקווה",
      "coordinates": [34.887764, 32.08404],
      "id": 10
    }, {
      "data": [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 1.0], ["-", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [0.0, "-", 0.0, 0.0, 0.0, 0.0], [0.0, "-"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "צפת",
      "coordinates": [35.495999, 32.964647],
      "id": 48
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 1.0], [1.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0], ["+", 1.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 1.0], [0.5, 0.0, 0.5], [0.5, 0.0, 0.5, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.5, 1.0, 0.5]],
      "name": "קרית אונו",
      "coordinates": [34.858859, 32.054862],
      "id": 22
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.5, 1.0], [1.0, 0.0, 0.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.5, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [1.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 0.5, 0.0, 0.0, 0.0], [1.0, 0.5, 0.5, 0.0]],
      "name": "קרית מוצקין",
      "coordinates": [35.079525, 32.838201],
      "id": 31
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5], [1.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0], ["-", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.5, 0.0], [1.0, "+"], [1.0], [0.0, 0.0, 1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
      "name": "קרית מלאכי",
      "coordinates": [34.746997, 31.730201],
      "id": 36
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 1.0, 0.0, 0.5, 0.5, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0], ["+", 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.5, 1.0], [0.0, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.5, 0.5, 0.5]],
      "name": "קרית שמונה",
      "coordinates": [35.570247, 33.207932],
      "id": 42
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 0.0], ["+", 1.0, 1.0, 0.0, 1.0, 0.5], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.5, 1.0, 0.5, 1.0], [1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [0.0, 1.0, 0.5, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [1.0, 0.0, 1.0, 1.0, 0.0, 0.0], [1.0, 1.0, 1.0, 0.0]],
      "name": "ראש העין",
      "coordinates": [34.952179, 32.095837],
      "id": 12
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 0.5, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, "+", 1.0, 0.0, 1.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [1.0, 0.0, 0.0, "+"], [0.0], [0.0, "-", "-"], [1.0, 0.0, "+"], [1.0, 1.0, "+"], ["+"], [0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]],
      "name": "ראשון לציון",
      "coordinates": [34.80705, 31.961544],
      "id": 1
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.5, 1.0], [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 1.0], [1.0, 1.0, 0.0], [1.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 0.0, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [0.0], [1.0, 0.5, 1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0]],
      "name": "רחובות",
      "coordinates": [34.811274, 31.892772],
      "id": 17
    }, {
      "data": [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 1.0, 1.0], ["+", 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [1.0, 0.5, 1.0, 0.0, 0.0, 1.0], [0.0, 1.0, 1.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [1.0, 1.0, "+"], ["X"], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]],
      "name": "רמלה",
      "coordinates": [34.87294, 31.931565],
      "id": 24
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.5], [0.5, 0.0, 0.5, 0.0], [0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 1.0, "+"], ["X"], [0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0, 0.0]],
      "name": "רמת גן",
      "coordinates": [34.824787, 32.068423],
      "id": 20
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 0.0, 1.0, 0.5, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0], [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 0.0, 0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 0.0, 0.0], [1.0, "+"], [1.0], [0.0, 0.5, 1.0, 0.0, 1.0, 1.0], [1.0, 1.0, 0.0, "-"], [1.0], [0.0, "-", "+"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.5]],
      "name": "רמת השרון",
      "coordinates": [34.84028, 32.137792],
      "id": 32
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 1.0], ["+", 1.0, 1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.5], [1.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, "+", 0.0, 0.0, 1.0, 1.0], [1.0, "+"], [1.0], [1.0, 1.0, 0.5, 1.0, 1.0, 1.0], [1.0, 1.0, 0.0, "+"], [1.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 1.0, 1.0, 1.0, 0.0, 1.0], [1.0, 0.5, 0.5, 0.5]],
      "name": "רעננה",
      "coordinates": [34.871328, 32.18478],
      "id": 9
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0], [1.0, 0.5, 1.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.5, 1.0, 1.0], [1.0, 1.0, 1.0], [0.0, 0.0, 0.0], ["-", 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0], [1.0, 1.0], [1.0, "-", 0.0, 0.0, 0.0, 0.0], [0.0, "-"], [1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, "-"], [0.0], [0.0, "-", "-"], [0.0, 0.0, "-"], [0.0, 0.0, "-"], ["X"], [0.0, 0.0, 0.0, 1.0, 0.0, 1.0], [0.0, 0.5, 0.5, 0.0]],
      "name": "שדרות",
      "coordinates": [34.595582, 31.522693],
      "id": 41
    }, {
      "data": [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], ["+", 1.0, 1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, "+", 0.0, 1.0, 1.0, 0.0], [1.0, "+"], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, "-"], [1.0], [0.0, "-", "+"], [0.0, 0.0, "+"], [0.0, 1.0, "+"], ["+"], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 0.5, 0.5]],
      "name": "תל אביב-יפו",
      "coordinates": [34.777821, 32.066157],
      "id": 3
    }
  ];

  scoreColorScale = d3.scale.quantile().domain([0, 0.5, 0.6, 1]).range(['#DA4F49', '#F89406', '#51A351']);

  scoreClassScale = d3.scale.quantile().domain([0, 0.5, 0.6, 1]).range(['c', 'b', 'a']);

  israelExtent = new MM.Extent(33.6006300456776, 33.9, 29.223819169667124, 36.1);

  israelCenter = {
    lat: 31.93776,
    lon: 34.99998
  };

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  };

  $(function() {
    var Cities, City, CityListItemView, CityListView, CityView, MapView, TransparencyMap, cities, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    City = (function(_super) {
      __extends(City, _super);

      function City() {
        _ref = City.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      City.prototype._isInt = function(n) {
        return typeof n === 'number' && parseFloat(n) === parseInt(n, 10) && !isNaN(n);
      };

      City.prototype._sum = function(scores) {
        scores = this._filterScores(scores);
        if (scores.length > 0) {
          return _.reduce(scores, function(memo, score) {
            return memo + score;
          });
        } else {
          return 0;
        }
      };

      City.prototype._average = function(scores) {
        scores = this._filterScores(scores);
        if (scores.length > 0) {
          return this._sum(scores) / scores.length;
        } else {
          return 'X';
        }
      };

      City.prototype._percentify = function(score) {
        if (isNaN(score)) {
          return score;
        }
        return Math.round(score * 100.0);
      };

      City.prototype._filterScores = function(scores) {
        return _.filter(scores, function(score) {
          return !isNaN(score);
        });
      };

      City.prototype.categoryScores = function(category) {
        return this.get('data')[category];
      };

      City.prototype.categoryAverage = function(category) {
        return this._average(this.categoryScores(category));
      };

      City.prototype.categoryAveragePercent = function(category) {
        return this._percentify(this.categoryAverage(category));
      };

      City.prototype.total = function() {
        var scores;
        return this._sum((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.get('data');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            scores = _ref1[_i];
            _results.push(this._sum(scores));
          }
          return _results;
        }).call(this));
      };

      City.prototype.totalAverage = function() {
        return this.total() / this.totalMax();
      };

      City.prototype.totalAveragePercent = function() {
        return this._percentify(this.totalAverage());
      };

      City.prototype.totalMax = function() {
        return this._sum(_.map(_.map(this.get('data'), this._filterScores), function(d) {
          return d.length;
        }));
      };

      City.prototype.score = function(category, criteria) {
        return this.get('data')[category][criteria];
      };

      City.prototype.grade = function(category, criteria) {
        var cls, score;
        score = this.score(category, criteria);
        cls = this.getScoreClassScale(score);
        if (score === '-' || score === '+' || score === 'X') {
          cls = score;
        }
        return cls.toUpperCase();
      };

      City.prototype.getScoreClassScale = function(score) {
        var cls;
        cls = scoreClassScale(score);
        if (cls == null) {
          cls = (function() {
            switch (false) {
              case score !== '-':
                return 'c';
              case score !== '+':
                return 'a';
              case score !== 'X':
                return 'x';
            }
          })();
        }
        return cls;
      };

      City.prototype.getScoreColorScale = function(score) {
        var color;
        color = scoreColorScale(score);
        if (color == null) {
          color = (function() {
            switch (false) {
              case score !== '-':
                return '#DA4F49';
              case score !== '+':
                return '#51A351';
              case score !== 'X':
                return '#999999';
            }
          })();
        }
        return color;
      };

      City.prototype.getCategoryAveragePercent = function(category) {
        var percentage;
        percentage = this.categoryAveragePercent(category);
        if (!isNaN(percentage)) {
          percentage += '%';
        }
        return percentage;
      };

      City.prototype.marker = function(category, criteria) {
        var m, props;
        m = {
          geometry: {
            type: 'Point',
            coordinates: this.get('coordinates')
          },
          properties: {
            name: this.get('name'),
            id: this.id,
            'marker-size': 'medium'
          }
        };
        props = m['properties'];
        if (this._isInt(criteria) && this._isInt(category)) {
          props['score'] = this.score(category, criteria);
          props['scoreclass'] = this.getScoreClassScale(props['score']);
          props['prettyscore'] = props['scoreclass'].toUpperCase();
          props['description'] = root.guide[category]['fields'][criteria];
          props['marker-color'] = this.getScoreColorScale(props['score']);
          props['marker-symbol'] = this.getScoreClassScale(props['score']);
          props['data-category'] = category;
          props['data-criteria'] = criteria;
        } else if (this._isInt(category)) {
          props['score'] = this.categoryAverage(category);
          props['scoreclass'] = this.getScoreClassScale(props['score']);
          props['prettyscore'] = this.categoryAveragePercent(category);
          props['description'] = root.guide[category]['category'];
          props['marker-color'] = this.getScoreColorScale(props['score']);
          props['marker-symbol'] = this.getScoreClassScale(props['score']);
          props['data-category'] = category;
        } else {
          props['score'] = this.totalAverage();
          props['scoreclass'] = this.getScoreClassScale(props['score']);
          props['prettyscore'] = this.totalAveragePercent() + '%';
          props['description'] = "ציון כולל";
          props['marker-color'] = this.getScoreColorScale(props['score']);
          props['marker-symbol'] = this.getScoreClassScale(props['score']);
          props['data-category'] = category;
        }
        return m;
      };

      return City;

    })(Backbone.Model);
    Cities = (function(_super) {
      __extends(Cities, _super);

      function Cities() {
        _ref1 = Cities.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Cities.prototype.model = City;

      Cities.prototype.comparator = function(city) {
        return -city.totalAverage();
      };

      return Cities;

    })(Backbone.Collection);
    MapView = (function(_super) {
      __extends(MapView, _super);

      function MapView() {
        _ref2 = MapView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      MapView.prototype.el = $('#map');

      MapView.prototype.maptooltipTemplate = _.template($('#template_maptooltip').html());

      MapView.prototype.markerFactory = function(m) {
        var elem,
          _this = this;
        elem = mapbox.markers.simplestyle_factory(m);
        MM.addEvent(elem, 'click', function(e) {
          _this.map.ease.location({
            lat: m.geometry.coordinates[1],
            lon: m.geometry.coordinates[0]
          }).zoom(_this.map.zoom()).optimal();
          root.App.navigate("city/" + m.properties.id, {
            trigger: true
          });
          return $('#content').scrollTo('0%');
        });
        return elem;
      };

      MapView.prototype.initialize = function() {
        var interaction,
          _this = this;
        _.bindAll(this);
        this.localizedLayer = mapbox.layer().id('idan.map-468vpvim').composite(false);
        this.englishLayer = mapbox.layer().id('idan.map-b25l9lse').composite(false);
        this.markerLayer = mapbox.markers.layer().factory(this.markerFactory);
        interaction = mapbox.markers.interaction(this.markerLayer);
        interaction.formatter(function(feature) {
          return _this.maptooltipTemplate(feature);
        });
        this.category = void 0;
        this.criteria = void 0;
        this.map = mapbox.map(this.el);
        this.map.addTileLayer(this.localizedLayer);
        this.map.addTileLayer(this.englishLayer.disable());
        this.map.addLayer(this.markerLayer);
        this.map.ui.zoomer.add();
        this.map.setPanLimits(israelExtent);
        this.map.setZoomRange(7, 12);
        this.map.centerzoom(israelCenter, 8);
        this.collection.on('all', function() {
          return _this.render();
        });
        return this.render();
      };

      MapView.prototype.render = function() {
        var _this = this;
        this.markerLayer.features(this.collection.map(function(d) {
          return d.marker(_this.category, _this.criteria);
        }));
        $('#maplegend').text(this.markerLayer.features()[0].properties.description);
        return this;
      };

      MapView.prototype.setCriteria = function(category, criteria) {
        /*
        Set the criteria used for generating markers.
        Call in one of three forms:
        setCriteria(): resets to the global city average
        setCriteria(category): markers represent the category average
        setCriteria(category, criteria): markers show the specific criteria score
        */

        this.category = category;
        this.criteria = criteria;
        return this.render();
      };

      MapView.prototype.localize = function(localized) {
        if (localized) {
          this.localizedLayer.enable();
          return this.englishLayer.disable();
        } else {
          this.englishLayer.enable();
          return this.localizedLayer.disable();
        }
      };

      return MapView;

    })(Backbone.View);
    CityListView = (function(_super) {
      __extends(CityListView, _super);

      function CityListView() {
        _ref3 = CityListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      CityListView.prototype.tagName = 'section';

      CityListView.prototype.className = 'citylist';

      CityListView.prototype.template = _.template($('#template_citylist').html());

      CityListView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      CityListView.prototype.render = function() {
        var $ul,
          _this = this;
        this.$el.html(this.template());
        $ul = this.$el.children('ul');
        this.collection.each(function(city) {
          var c;
          c = new CityListItemView({
            model: city
          });
          return $ul.append(c.render().el);
        });
        return this;
      };

      return CityListView;

    })(Backbone.View);
    CityListItemView = (function(_super) {
      __extends(CityListItemView, _super);

      function CityListItemView() {
        _ref4 = CityListItemView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      CityListItemView.prototype.tagName = 'li';

      CityListItemView.prototype.className = 'citylistitem';

      CityListItemView.prototype.template = _.template($('#template_citylistitem').html());

      CityListItemView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      CityListItemView.prototype.render = function() {
        var content;
        content = this.template({
          name: this.model.get('name'),
          score: this.model.totalAveragePercent(),
          id: this.model.id
        });
        this.$el.attr('data-class', scoreClassScale(this.model.totalAverage()));
        this.$el.html(content);
        return this;
      };

      return CityListItemView;

    })(Backbone.View);
    CityView = (function(_super) {
      __extends(CityView, _super);

      function CityView() {
        _ref5 = CityView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      CityView.prototype.tagName = 'section';

      CityView.prototype.className = 'citydetail';

      CityView.prototype.cityTemplate = _.template($('#template_citydetail').html());

      CityView.prototype.categoryTemplate = _.template($('#template_category').html());

      CityView.prototype.criteriaTemplate = _.template($('#template_criteria').html());

      CityView.prototype.events = {
        'click .category': 'recolorMap',
        'click .criteria': 'recolorMap',
        'click >header>.score': 'recolorMap'
      };

      CityView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      CityView.prototype.render = function() {
        var $cat, category, crit, criteria, i, j, _i, _j, _len, _len1, _ref6;
        this.$el.html(this.cityTemplate({
          name: this.model.get('name'),
          score: this.model.totalAveragePercent(),
          grade: scoreClassScale(this.model.totalAverage())
        }));
        _ref6 = this.model.get('data');
        for (i = _i = 0, _len = _ref6.length; _i < _len; i = ++_i) {
          category = _ref6[i];
          $cat = $(this.categoryTemplate({
            category: i,
            name: root.guide[i]['category'],
            percentage: this.model.getCategoryAveragePercent(i),
            score: this.model.categoryAverage(i),
            grade: this.model.getScoreClassScale(this.model.categoryAverage(i))
          }));
          for (j = _j = 0, _len1 = category.length; _j < _len1; j = ++_j) {
            criteria = category[j];
            crit = this.criteriaTemplate({
              category: i,
              criteria: j,
              name: root.guide[i]['fields'][j],
              grade: this.model.grade(i, j)
            });
            $cat.children('.criteria-list').append(crit);
          }
          this.$el.append($cat);
        }
        return this;
      };

      CityView.prototype.recolorMap = function(ev) {
        var category, criteria, description, header, source, triangle;
        source = $(ev.currentTarget);
        description = source.find('header>h1').first().text();
        header = source.children('header');
        triangle = header.children('.triangle');
        category = parseInt(source.attr('data-category') || -1);
        criteria = parseInt(source.attr('data-criteria') || -1);
        $('.selected').removeClass('selected');
        triangle.css('top', (header.height() / 2 - 10) + 'px');
        if (category >= 0 && criteria >= 0) {
          mapView.setCriteria(category, criteria);
          source.addClass('selected');
        } else if (category >= 0) {
          mapView.setCriteria(category);
          if (source.children('.criteria-list').hasClass('collapsed')) {
            source.children('.criteria-list').removeClass('collapsed');
            $('#content').scrollTo(source, 250, {
              offset: -20
            });
          } else {
            source.children('.criteria-list').addClass('collapsed');
            $('#content').scrollTo(source, 250, {
              offset: -20
            });
          }
          source.addClass('selected');
        } else {
          mapView.setCriteria();
        }
        return false;
      };

      return CityView;

    })(Backbone.View);
    cities = new Cities();
    cities.reset(data);
    root.cities = cities;
    TransparencyMap = (function(_super) {
      __extends(TransparencyMap, _super);

      function TransparencyMap() {
        _ref6 = TransparencyMap.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      TransparencyMap.prototype.routes = {
        '': 'home',
        'city/:id': 'city'
      };

      TransparencyMap.prototype.initialize = function() {
        this.cityListView = new CityListView({
          collection: cities
        });
        this.mapView = new MapView({
          collection: cities
        });
        return root.mapView = this.mapView;
      };

      TransparencyMap.prototype.home = function() {
        $('#info').empty();
        $('#info').html(this.cityListView.render().el);
        return this.mapView.setCriteria();
      };

      TransparencyMap.prototype.city = function(id) {
        var cv;
        $('#info').empty();
        this.mapView.setCriteria();
        cv = new CityView({
          model: cities.get(id)
        });
        return $('#info').html(cv.render().el);
      };

      return TransparencyMap;

    })(Backbone.Router);
    root.App = new TransparencyMap();
    return Backbone.history.start();
  });

}).call(this);
